//============================================================================
// Name        : AgvTcpClient.cpp
// Author      : szr
// Version     :
// Copyright   : Your copyright notice
// Description : Hello World in C++, Ansi-style
//============================================================================

#include <iostream>
#include <boost/array.hpp>
#include <boost/asio.hpp>
#include <boost/timer/timer.hpp>
#include <boost/date_time/posix_time/posix_time_types.hpp>
#include <boost/asio/deadline_timer.hpp>
#include "data_definition.h"
union Timer_Stamp
{
    uint16_t value;     //单个轮子的轮速(RPM),注意单位的统一。
    uint8_t NumBit[2];     //轮速对应的四个字节。
};
bool DriveCommand(const int LeftWheelSpeed, const int RightWheelSpeed, ControlPackge & cmdPackage)
      {
           CommandBit LeftWheel, RightWheel;

           LeftWheel.WheelSpeed = LeftWheelSpeed;
           RightWheel.WheelSpeed = RightWheelSpeed;

           cmdPackage.cmd.WheelLeft.bit[0] = LeftWheel.NumBit[0];
           cmdPackage.cmd.WheelLeft.bit[1] = LeftWheel.NumBit[1];
           cmdPackage.cmd.WheelLeft.bit[2] = LeftWheel.NumBit[2];
           cmdPackage.cmd.WheelLeft.bit[3] = LeftWheel.NumBit[3];

           cmdPackage.cmd.WheelRight.bit[0] = RightWheel.NumBit[0];
           cmdPackage.cmd.WheelRight.bit[1] = RightWheel.NumBit[1];
           cmdPackage.cmd.WheelRight.bit[2] = RightWheel.NumBit[2];
           cmdPackage.cmd.WheelRight.bit[3] = RightWheel.NumBit[3];

          return true;
      }
/*
 * 主要流程如下：
通过tcp::socket类定义一个tcp client对象socket
通过connect函数连接服务器，打开socket连接。
通过read_some函数来读数据
另外，还可以通过write_some来写数据，通过close来关闭socket连接（这里是通过释放socket对象隐式释放连接）。
 *
 * */


typedef std::vector<uint8_t> Bytes;
using boost::asio::ip::tcp;
//boost::asio::deadline_timer m_Timer;
const int MAX_RCV_SIZE = 1024;
const int TIMEOUT = 40; //milliseconds
const int LEFT_PWM = 0;
const int RIGHT_PWM = 0;




    int main(int argc, char**argv)
    {
        try
        {
        	std::cout<<"bytes:"<<std::endl;
            boost::asio::io_service io_service;
            tcp::endpoint end_point(boost::asio::ip::address::from_string("192.168.1.33"), 2000);
            boost::asio::deadline_timer timer(io_service);
            tcp::socket socket(io_service);
            socket.connect(end_point);


            	ControlPackge Buffer;
            	DriveCommand(LEFT_PWM,RIGHT_PWM,Buffer);
				char write_buff[sizeof(Buffer)];
				memset(write_buff,'0',sizeof(write_buff));
				write_buff[0] = Buffer.FrameDataHeader.FrameHeader.bit[0];
				write_buff[1] = Buffer.FrameDataHeader.FrameHeader.bit[1];
				write_buff[2] = Buffer.FrameDataHeader.DatasLength;
				write_buff[3] = Buffer.cmd.DataHeader;
				write_buff[4] = Buffer.cmd.DataLenght;
				write_buff[5] = Buffer.cmd.WheelLeft.bit[0];
				write_buff[6] = Buffer.cmd.WheelLeft.bit[1];
				write_buff[7] = Buffer.cmd.WheelLeft.bit[2];
				write_buff[8] = Buffer.cmd.WheelLeft.bit[3];
				write_buff[9] = Buffer.cmd.WheelRight.bit[0];
				write_buff[10] = Buffer.cmd.WheelRight.bit[1];
				write_buff[11] = Buffer.cmd.WheelRight.bit[2];
				write_buff[12] = Buffer.cmd.WheelRight.bit[3];
				write_buff[13] = Buffer.checksum;
				boost::system::error_code error;
				size_t slen = socket.write_some(boost::asio::buffer(write_buff), error);
				//size_t slen = socket.read_some(boost::asio::buffer(Cbuff_read), error);
				if (error == boost::asio::error::eof)
					return 0;//break; // Connection closed cleanly by peer.
				else if (error)
					throw boost::system::system_error(error); // Some other error.
				//Buffer.NumBit[0] =  read_buff[5];
				//Buffer.NumBit[1] =  read_buff[6];
				//Buffer.NumBit[0] = Cbuff_read[5];
				//Buffer.NumBit[1] = Cbuff_read[6];
				//std::cout.write(buf.data(), len);
				std::cout<<"bytes:"<<slen<<"\ttime:"<<std::endl;
			   // printf("time:%d!\n",Buffer.value);
				timer.expires_from_now(boost::posix_time::milliseconds(TIMEOUT));
				timer.wait();
            	/*Timer_Stamp Buffer;
            	Bytes read_buff;
                read_buff.resize(MAX_RCV_SIZE);
                //boost::array<char, 128> buf;
                //char Cbuff_read[1024];
                boost::system::error_code error;
                size_t slen = socket.read_some(boost::asio::buffer(read_buff), error);
                //size_t slen = socket.read_some(boost::asio::buffer(Cbuff_read), error);
                if (error == boost::asio::error::eof)
                    break; // Connection closed cleanly by peer.
                else if (error)
                    throw boost::system::system_error(error); // Some other error.
                Buffer.NumBit[0] =  read_buff[5];
                Buffer.NumBit[1] =  read_buff[6];
                //Buffer.NumBit[0] = Cbuff_read[5];
                //Buffer.NumBit[1] = Cbuff_read[6];
                //std::cout.write(buf.data(), len);
                std::cout<<"bytes:"<<slen<<"\ttime:"<<Buffer.value<<std::endl;
               // printf("time:%d!\n",Buffer.value);
                timer.expires_from_now(boost::posix_time::milliseconds(TIMEOUT));
                timer.wait();*/

        }
        catch (std::exception& e)
        {
            std::cerr << e.what() << std::endl;
        }

        return 0;
    }
