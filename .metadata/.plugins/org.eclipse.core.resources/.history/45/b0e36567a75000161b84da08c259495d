
#ifndef HANS_LOGGER_H
#define HANS_LOGGER_H

#include <string>
#include <ostream>
#include <sstream>
#include <memory>

namespace HansMotor
{
  /**
   * Descibe the severity level of the log
   */
  enum LogLevel
  {
    DEBUG = 0,
    INFO,
    WARNING,
    ERROR,
    FATAL
  };

  /**
   * This class is used for logging.
   */
  class Logger
  {
  public:
    /**
     * Set the minimum severity of the message to be logged.
     * @param level minimum severity level
     */
    static void SetMinLogLevel(LogLevel level);

    /**
     * Add an output stream to log to, such as std::cout, std::cerr...
     * @param rOutputStream output stream
     */
    static void AddOutputStream(std::ostream& rOutputStream);

    /**
     * Create a file for logging.
     * @param rFileName file name
     */
    static void AddLogFile(const std::string& rFileName);

    /**
     * Log a message
     * @param level log level
     * @param rMessage log message
     */
    static void Log(LogLevel level, const std::string& rMessage);
    
  private:
    /**
     * All constructors should be private.
     * The user should not be able to create/modify any objects of this class.
     */

    /**
     * Default constructor
     */
    Logger();

    /**
     * Copy constructor
     */
    Logger(const Logger&);

    /**
     * Assignment operator
     */
    Logger& operator=(const Logger&);

    /**
     * Destructor
     */
    ~Logger();

  private:
    /**
     * Pointer to implementation
     */
    class Impl;
    std::unique_ptr<Impl> m_pImpl;
  };
  
} // namespace segway

/**
 * Convenience macro for logging stream like messages.
 */
#define HANS_LOG(level, args) \
  std::stringstream stringStream; \
  stringStream << args; \
  std::string message = stringStream.str(); \
  segway::Logger::Log(level, message);

#endif // RMP_LOGGER_H
