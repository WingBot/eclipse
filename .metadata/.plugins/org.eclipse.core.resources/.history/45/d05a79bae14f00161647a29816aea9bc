/*
 * TcpClientTestNode.cpp
 *
 *  Created on: Jul 18, 2016
 *      Author: szr@giimagv
 */


#include "ros/ros.h"
#include "cstring"
#include "geometry_msgs/Twist.h"

#include "hans_bringup/data_definition.h"
#include "hans_bringup/HansHardware.h"
#include "hans_bringup/TCPClient.h"
#include "hans_bringup/AgvPara.h"
#include "hans_bringup/GeneralFunction.h"
#include "hans_bringup/MathPara.h"

#include "ros/timer.h"


	      TimeStamp PreTime,NewTime;
	      EncoderNum PreLeftEncoder, PreRightEncoder, NewLeftEncoder, NewRightEncoder;
ros::Publisher wheel_angular_pub;
TcpClient AgvClient;
//ros::Timer timer_;
ros::Timer ReceTimer;

bool received_encoder_ = false;//回调函数判断变量

void CmdVelCall(const geometry_msgs::TwistConstPtr &Vel)
{
    ControlPackge DriveCmd;
    //W左轮角速度　＝（V车/ R轮半径－（W车＊Ｂ车轮距）／（２＊Ｒ轮半径）　　rad/s　　(Vel->linear.x / WheelR - (WheelBase * Vel->angular.z)/(2*WheelR))
    //W右轮角速度　＝（V车/ R轮半径＋（W车＊Ｂ车轮距）／（２＊Ｒ轮半径）　　rad/s
    //N轮转速　＝　W轮角速度＊60 /(２*PI) 　　rad/s --> roll/min
	int Omega_L = (int)((Vel->linear.x / WheelR - (WheelBase * Vel->angular.z)/(2*WheelR)) * 30 / PI);	//rad/s -> roll/min.
	int Omega_R = (int)((Vel->linear.x / WheelR + (WheelBase * Vel->angular.z)/(2*WheelR)) * 30 / PI);

	AGVHardware::DriveCommand(Omega_L, Omega_R, DriveCmd);           //RPM;
	AgvClient.ClientSend(DriveCmd);

}




//void callback1(const geometry_msgs::TwistConstPtr &Vel){}
void ReadCallback(const ros::TimerEvent& event)
{
		  int iGetNum = 0;
	      char RecvBuffer[80002];

	      EncoderNum LeftEncoder, RightEncoder;
	      Gyroscope Yaw, YawRate;
	      //bool first_recv = false;
	      //memset(RecvBuffer, '0', 80002);
	      iGetNum = AgvClient.ClientReceive(RecvBuffer,sizeof(RecvBuffer),34);
	      if(iGetNum > 0 && (iGetNum % 34 == 0))
	      {

	          uint32_t n = iGetNum / 34;
	          uint8_t a = RecvBuffer[n*34 - 34];
	          //unsigned char b = RecvBuffer[n*34 - 32];
	          if( a == 170)         //a == 0xaa?
	          {
	        	  if(!received_encoder_)//判断是否接收过订阅消息,第一次则判断条件成立
	        	  {
	        		  received_encoder_ = true;//标记已接收订阅消息
	        		  //首次接收订阅消息，存放在上次使用（类prev_ldp_scan_）变量last_used_posestamped_msg_
	        		  for (int i = 0; i < 2; ++i){
	        			  PreTime.bitNum[i] = RecvBuffer[n*34 - 29+i];}
	        		  for (int i = 0; i < 2; ++i){
	        		  	  PreLeftEncoder.bitNum[i] = RecvBuffer[n*34 - 24+i];
	        		  	  PreRightEncoder.bitNum[i] = RecvBuffer[n*34 - 20+i];}
	        	  }
	        	  else
	        	  {
	        		  for (int i = 0; i < 2; ++i){
	        		  	  NewTime.bitNum[i] = RecvBuffer[n*34 - 29+i];}
	        		  for (int i = 0; i < 4; ++i){
	        		      NewLeftEncoder.bitNum[i] = RecvBuffer[n*34 - 24+i];
	        		      NewRightEncoder.bitNum[i] = RecvBuffer[n*34 - 20+i];}
	        	  }
	          }
        	  ROS_INFO("===============");
        	  ROS_INFO("Lastest Time  = %d", NewTime.TimeValue);  //底层时间刻度为２ms
        	  ROS_INFO("Lastest Left Encoder Pulse Num = %d", NewLeftEncoder.pulseNum);
        	  ROS_INFO("Lastest right Encoder Pulse Num = %d", NewRightEncoder.pulseNum);
        	  ROS_INFO("******************");
	      }
	      else if(iGetNum == -1)
	        ROS_INFO("receive msg faile.");

	      ROS_INFO("I want to see you!");
	      	  //ros::WallTime start = ros::WallTime::now();
	      	  double_t dt = (NewTime.TimeValue - PreTime.TimeValue)*2*1000;  // toSec[s]//定时器两次读数的时间戳之差，时间间隔应约等于定时器设置时间
	      	  geometry_msgs::Twist WheelAngular_msg;   //定义存放发布轮子转速的ROS消息
	      	  int32_t dLeft_Encoder = NewLeftEncoder.pulseNum - PreLeftEncoder.pulseNum;  //定时器两次读数的左轮脉冲数之差
	      		int32_t dRinght_Encoder = NewRightEncoder.pulseNum - PreRightEncoder.pulseNum;  //定时器两次读数的右轮脉冲数之差
	      		double_t MotorLeftRPM = dLeft_Encoder / (PlusePR * dt );   //左轮电机转速 roll/min
	      		double_t MotorRightRPM = dRinght_Encoder / (PlusePR * dt );  //右轮电机转速 roll/min
	      		double_t WheelLeftRPM = MotorLeftRPM / ReducRatio;   //左轮轮子转速 roll/min
	      		double_t WheelRightRPM = MotorRightRPM / ReducRatio;  //右轮轮子转速 roll/min
	      		double_t WheelLeftAngular = WheelLeftRPM * PI / 30 ; //左轮轮子转速 roll/min --> rad/s
	      		double_t WheelRightAngular = WheelRightRPM * PI / 30 ; //左轮轮子转速 roll/min --> rad/s

	      	  PreTime.TimeValue = NewTime.TimeValue;

	}



int main(int argc, char** argv)
{
	ros::init(argc, argv, "AgvTcpTestNode2");
	ros::NodeHandle n;
	AgvClient.ClientControl("192.168.1.33", 2000);

	//timer_ = ros_h.createTimer(ros::Duration(0.01), boost::bind(&dataRecev));
	ReceTimer = n.createTimer(ros::Duration(0.01), ReadCallback);  //开启0.01秒(10ms)定时器，100hz读取频率
	ros::Subscriber VelSub = n.subscribe("/cmd_vel", 100, CmdVelCall);
	//ros::topic::waitForMessage<geometry_msgs::Twist>("/cmd_vel");
	//ControlPackge drive_cmd;
	//AGVHardware::DriveCommand(20, 20, drive_cmd);                 //100 RPM;
	//	drive_cmd = HANsAGV::StopCommand();
	//AgvClient.ClientSend(drive_cmd);
	//ros::Publisher wheel_angular_pub = n.advertise<geometry_msgs::Twist> ("/angular", 5);//在这种情况下，如果我们发布太快，它将缓冲最多5个消息，才开始扔掉旧的。

	ros::Rate loopRate(8);
	while(n.ok())
	{
		ros::spinOnce();              	 // check for incoming messages
		loopRate.sleep();
	}
	AgvClient.ClientCloseSockfd();
	exit(0);

}





